<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>群鑫璀璨</title>
  
  <subtitle>Technology Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tonyhluo.top/"/>
  <updated>2019-02-19T13:39:04.522Z</updated>
  <id>http://tonyhluo.top/</id>
  
  <author>
    <name>HelloCoder~</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python之列表</title>
    <link href="http://tonyhluo.top/2019/02/01/pythonList/"/>
    <id>http://tonyhluo.top/2019/02/01/pythonList/</id>
    <published>2019-02-01T13:54:39.000Z</published>
    <updated>2019-02-19T13:39:04.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><em>python中列表也是一种序列式的数据类型。可以通过下标或者切片的方式去访问列表中的元素。不同于字符串的是，列表是能够保留任意数目的python对象的灵活的容器。列表不仅可以包含python的标准类型，也可以包含我们自己定义的对象作为元素，还有一点特别重要的是，不同于C语言中的数组类型，列表是可以包含不同类型的数据类型。因为列表是一种容器，所以它可以调用它所支持的一些构造函数，比如说pop、sort、empt、reverse等。下面就让我们一起学习一下列表的有关知识。</em><br><a id="more"></a></p><hr><h1 id="1-列表的创建和赋值"><a href="#1-列表的创建和赋值" class="headerlink" title="1.列表的创建和赋值"></a>1.列表的创建和赋值</h1><p>&emsp;&emsp;创建列表有两种方法，一种是直接给一个列表变量赋值，只不过和给普通变量赋值不一样的是：列表是用方括号[ ]来定义的；一种是用工厂方法<strong><em>list()</em></strong> 赋值。上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">678</span>, <span class="string">"dog"</span>, <span class="number">11.13</span>, [<span class="string">"abc"</span>, <span class="string">"def"</span>], <span class="number">-9.6</span>]</span><br><span class="line">print(aList)     <span class="comment">#输出[678, "dog", 11.13, ["abc", "def"], -9.6]</span></span><br><span class="line">                 <span class="comment">#tip：列表里面可以嵌套列表的</span></span><br><span class="line">emptyList = []</span><br><span class="line">print(emptyList) <span class="comment">#输出[]</span></span><br><span class="line">bList = list(<span class="string">"hello"</span>)</span><br><span class="line">print(bList)     <span class="comment">#输出['h', 'e', 'l', 'l', 'o']</span></span><br></pre></td></tr></table></figure></p><h1 id="2-值的访问"><a href="#2-值的访问" class="headerlink" title="2.值的访问"></a>2.值的访问</h1><p>&emsp;&emsp;可以通过下标或者切片的方式去访问列表中的元素，和字符串的访问一样。上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">678</span>, <span class="string">"dog"</span>, <span class="number">11.13</span>, [<span class="string">"abc"</span>, <span class="string">"def"</span>], <span class="number">-9.6</span>]</span><br><span class="line">print(aList[<span class="number">0</span>])    <span class="comment">#输出678</span></span><br><span class="line">print(aList[<span class="number">1</span>:<span class="number">5</span>])  <span class="comment">#输出['dog', 11.13, ['abc', 'def'], -9.6]</span></span><br><span class="line">print(aList[:<span class="number">3</span>])   <span class="comment">#输出[678, 'dog', 11.13]</span></span><br><span class="line">print(aList[<span class="number">3</span>][<span class="number">0</span>]) <span class="comment">#输出'abc'</span></span><br></pre></td></tr></table></figure></p><h1 id="3-更新列表"><a href="#3-更新列表" class="headerlink" title="3.更新列表"></a>3.更新列表</h1><p>&emsp;&emsp;可以通过在等号的左边指定索引或者索引范围来更新列表中的一个或者几个元素，也可以通过<strong><em>append()</em></strong> 的方法来追加元素到列表中去。上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">aList     = [<span class="number">678</span>, <span class="string">"dog"</span>, <span class="number">11.13</span>, [<span class="string">"abc"</span>, <span class="string">"def"</span>], <span class="number">-9.6</span>]</span><br><span class="line">emptyList = []</span><br><span class="line">aList[<span class="number">0</span>] = <span class="number">123</span></span><br><span class="line">print(aList)     <span class="comment">#输出[123, 'dog', 11.13, ['abc', 'def'], -9.6]</span></span><br><span class="line">aList[<span class="number">1</span>:<span class="number">3</span>] = [<span class="string">"cat"</span>, <span class="number">2010</span>]</span><br><span class="line">print(aList)     <span class="comment">#输出[123, 'cat', 2010, ['abc', 'def'], -9.6]</span></span><br><span class="line">emptyList.append(<span class="string">"hava a value"</span>)</span><br><span class="line">print(emptyList) <span class="comment">#输出['hava a value']</span></span><br><span class="line">aList.append(aList[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">print(aList)     <span class="comment">#输出[123, 'cat', 2010, ['abc', 'def'], -9.6, ['cat', 2010]]</span></span><br></pre></td></tr></table></figure></p><h1 id="4-删除列表中的元素或删除自身"><a href="#4-删除列表中的元素或删除自身" class="headerlink" title="4.删除列表中的元素或删除自身"></a>4.删除列表中的元素或删除自身</h1><p>&emsp;&emsp;如果确切的知道要删除元素的索引可以用<strong><em>del</em></strong> 语句，否则可以用<strong><em>remove()</em></strong> 方法。我们还可以通过<strong><em>pop()</em></strong> 方法来删除一个元素并从列表中返回它。上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">678</span>, <span class="string">"dog"</span>, <span class="number">11.13</span>, [<span class="string">"abc"</span>, <span class="string">"def"</span>], <span class="number">-9.6</span>]</span><br><span class="line"><span class="keyword">del</span> aList[<span class="number">1</span>]</span><br><span class="line">print(aList) <span class="comment">#输出[678, 11.13, ['abc', 'def'], -9.6]</span></span><br><span class="line">aList.remove(<span class="number">678</span>)</span><br><span class="line">print(aList) <span class="comment">#输出[11.13, ['abc', 'def'], -9.6]</span></span><br><span class="line">a = aList.pop()</span><br><span class="line">print(a)     <span class="comment">#输出-9.6，不指定索引默认删除最后一个元素</span></span><br><span class="line">print(aList) <span class="comment">#输出[11.13, ['abc', 'def']]</span></span><br><span class="line">a = aList.pop(<span class="number">1</span>)</span><br><span class="line">print(a)     <span class="comment">#输出['abc', 'def']</span></span><br><span class="line">print(aList) <span class="comment">#输出[11.13]</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;一般情况下，我们不需要删除一个列表对象，因为当列表对象出了作用域后会被自动析构，但是你如果想明确删除整个列表，可以用<strong><em>del</em></strong> 语句，上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aList = [<span class="number">678</span>, <span class="string">"dog"</span>, <span class="number">11.13</span>, [<span class="string">"abc"</span>, <span class="string">"def"</span>], <span class="number">-9.6</span>]</span><br><span class="line"><span class="keyword">del</span> aList</span><br><span class="line">print(aList) <span class="comment">#注意：！！！！此时程序会报错NameError: name 'aList' is not defined，因为我们已经删除了aList，没有了aList这个对象，所以就打印不出来</span></span><br></pre></td></tr></table></figure></p><h1 id="5-操作符"><a href="#5-操作符" class="headerlink" title="5.操作符"></a>5.操作符</h1><p>&emsp;&emsp;基本同字符串。一个特殊操作符就是列表类型操作符和列表解析。其实在python中没有专门用于列表类型的操作符。列表可以使用大部分的对象和列表序列的操作符。列表有属于自己的方法—-列表解析。上代码吧：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print([i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]);             <span class="comment">#输出[2,4,6]</span></span><br><span class="line">print([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]) <span class="comment">#输出[0, 2, 4, 6]</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;em&gt;python中列表也是一种序列式的数据类型。可以通过下标或者切片的方式去访问列表中的元素。不同于字符串的是，列表是能够保留任意数目的python对象的灵活的容器。列表不仅可以包含python的标准类型，也可以包含我们自己定义的对象作为元素，还有一点特别重要的是，不同于C语言中的数组类型，列表是可以包含不同类型的数据类型。因为列表是一种容器，所以它可以调用它所支持的一些构造函数，比如说pop、sort、empt、reverse等。下面就让我们一起学习一下列表的有关知识。&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://tonyhluo.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://tonyhluo.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer之二进制中1的个数</title>
    <link href="http://tonyhluo.top/2019/01/27/codeNumberOf1/"/>
    <id>http://tonyhluo.top/2019/01/27/codeNumberOf1/</id>
    <published>2019-01-27T15:59:03.000Z</published>
    <updated>2019-01-27T16:17:27.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>&emsp;&emsp;输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">int</span>  <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">unsigned</span> <span class="keyword">int</span> flg = <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span>(flg)&#123;</span><br><span class="line">             <span class="keyword">if</span>(flg &amp; n)&#123;</span><br><span class="line">                 c++;</span><br><span class="line">             &#125;</span><br><span class="line">             flg = flg &lt;&lt; <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> c;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。&lt;br&gt;
    
    </summary>
    
      <category term="Code" scheme="http://tonyhluo.top/categories/Code/"/>
    
    
      <category term="Code" scheme="http://tonyhluo.top/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer之矩阵覆盖</title>
    <link href="http://tonyhluo.top/2019/01/27/codeRectCover/"/>
    <id>http://tonyhluo.top/2019/01/27/codeRectCover/</id>
    <published>2019-01-27T15:58:48.000Z</published>
    <updated>2019-01-27T16:12:39.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>&emsp;&emsp;我们可以用2 * 1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2* 1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//就是斐波那契数列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rectCover</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == n || <span class="number">1</span> == n || <span class="number">2</span> == n)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> FibOne = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> FibTwo = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> FibN = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            FibN = FibOne + FibTwo;</span><br><span class="line">            FibTwo = FibOne;</span><br><span class="line">            FibOne = FibN;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> FibN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我们可以用2 * 1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2* 1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？&lt;br&gt;
    
    </summary>
    
      <category term="Code" scheme="http://tonyhluo.top/categories/Code/"/>
    
    
      <category term="Code" scheme="http://tonyhluo.top/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer之变态跳台阶</title>
    <link href="http://tonyhluo.top/2019/01/27/codeJumpFloorII/"/>
    <id>http://tonyhluo.top/2019/01/27/codeJumpFloorII/</id>
    <published>2019-01-27T15:58:24.000Z</published>
    <updated>2019-01-27T16:05:32.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>&emsp;&emsp;一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloorII</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>&lt;&lt;(number<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。&lt;br&gt;
    
    </summary>
    
      <category term="Code" scheme="http://tonyhluo.top/categories/Code/"/>
    
    
      <category term="Code" scheme="http://tonyhluo.top/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer之跳台阶</title>
    <link href="http://tonyhluo.top/2019/01/27/codeJumpFloor/"/>
    <id>http://tonyhluo.top/2019/01/27/codeJumpFloor/</id>
    <published>2019-01-27T15:57:58.000Z</published>
    <updated>2019-01-27T16:03:54.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>&emsp;&emsp;一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloor</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == n || <span class="number">1</span> == n || <span class="number">2</span> == n)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> jumpOne = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> jumpTwo = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> jumpN = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            jumpN = jumpOne + jumpTwo;</span><br><span class="line">            jumpTwo = jumpOne;</span><br><span class="line">            jumpOne = jumpN;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jumpN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。&lt;br&gt;
    
    </summary>
    
      <category term="Code" scheme="http://tonyhluo.top/categories/Code/"/>
    
    
      <category term="Code" scheme="http://tonyhluo.top/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer之斐波那契数列</title>
    <link href="http://tonyhluo.top/2019/01/27/codeFibonacci/"/>
    <id>http://tonyhluo.top/2019/01/27/codeFibonacci/</id>
    <published>2019-01-27T15:57:31.000Z</published>
    <updated>2019-01-27T16:01:00.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>&emsp;&emsp;大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。<br>&emsp;&emsp;n&lt;=39<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == n || <span class="number">1</span> == n)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> FibOne = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> FibTwo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> FibN = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            FibN = FibOne + FibTwo;</span><br><span class="line">            FibTwo = FibOne;</span><br><span class="line">            FibOne = FibN;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> FibN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。&lt;br&gt;&amp;emsp;&amp;emsp;n&amp;lt;=39&lt;br&gt;
    
    </summary>
    
      <category term="Code" scheme="http://tonyhluo.top/categories/Code/"/>
    
    
      <category term="Code" scheme="http://tonyhluo.top/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer之旋转数组的最小数字</title>
    <link href="http://tonyhluo.top/2019/01/27/codeMinNumberInRotateArray/"/>
    <id>http://tonyhluo.top/2019/01/27/codeMinNumberInRotateArray/</id>
    <published>2019-01-27T15:50:51.000Z</published>
    <updated>2019-01-27T15:55:49.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>&emsp;&emsp;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = rotateArray[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=  rotateArray.size() - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(val &gt; rotateArray[i])</span><br><span class="line">            &#123;</span><br><span class="line">                val = rotateArray[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rotateArray.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index2 = rotateArray.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> indexMid = index1;</span><br><span class="line">        <span class="keyword">while</span>(rotateArray[index1] &gt;= rotateArray[index2])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1</span> == index2 - index1)</span><br><span class="line">            &#123;</span><br><span class="line">                indexMid = index2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            indexMid = (index1+index2)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(rotateArray[indexMid] == rotateArray[index1] &amp;&amp; rotateArray[index1] == rotateArray[index2])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> minOrder(rotateArray);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(rotateArray[indexMid] &lt;= rotateArray[index1])</span><br><span class="line">            &#123;</span><br><span class="line">                index2 = indexMid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(rotateArray[indexMid] &gt;= rotateArray[index1])</span><br><span class="line">            &#123;</span><br><span class="line">                index1 = indexMid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rotateArray[indexMid];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。&lt;br&gt;
    
    </summary>
    
      <category term="Code" scheme="http://tonyhluo.top/categories/Code/"/>
    
    
      <category term="Code" scheme="http://tonyhluo.top/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer之用两个栈实现队列</title>
    <link href="http://tonyhluo.top/2019/01/27/codeTwoStack/"/>
    <id>http://tonyhluo.top/2019/01/27/codeTwoStack/</id>
    <published>2019-01-27T15:44:56.000Z</published>
    <updated>2019-01-27T15:48:18.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>&emsp;&emsp;用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack1.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> headVal = stack1.top();</span><br><span class="line">            stack2.push(headVal);</span><br><span class="line">            stack1.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> headVal = stack2.top();</span><br><span class="line">        stack2.pop();</span><br><span class="line">        <span class="keyword">while</span>(!stack2.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> headVal = stack2.top();</span><br><span class="line">            stack1.push(headVal);</span><br><span class="line">            stack2.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> headVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack1;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。&lt;br&gt;
    
    </summary>
    
      <category term="Code" scheme="http://tonyhluo.top/categories/Code/"/>
    
    
      <category term="Code" scheme="http://tonyhluo.top/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer之重建二叉树</title>
    <link href="http://tonyhluo.top/2019/01/27/codeReConstructBinaryTree/"/>
    <id>http://tonyhluo.top/2019/01/27/codeReConstructBinaryTree/</id>
    <published>2019-01-27T15:16:40.000Z</published>
    <updated>2019-01-27T15:30:47.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>&emsp;&emsp;输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">reConstructBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == pre.size() || <span class="number">0</span> == vin.size())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre_left, pre_right, vin_left, vin_right;</span><br><span class="line">        <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rootVal = pre[<span class="number">0</span>];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</span><br><span class="line">        root-&gt;val = rootVal;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pre.size() == <span class="number">1</span> &amp;&amp; vin.size() == <span class="number">1</span> &amp;&amp; pre[<span class="number">0</span>] == vin[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vin.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vin[i] == rootVal)</span><br><span class="line">            &#123;</span><br><span class="line">                cursor = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cursor; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            vin_left.push_back(vin[i]);</span><br><span class="line">            pre_left.push_back(pre[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = cursor + <span class="number">1</span>; i &lt; vin.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            vin_right.push_back(vin[i]);</span><br><span class="line">            pre_right.push_back(pre[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;left = reConstructBinaryTree(pre_left,vin_left);</span><br><span class="line">        root-&gt;right = reConstructBinaryTree(pre_right,vin_right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。&lt;br&gt;
    
    </summary>
    
      <category term="Code" scheme="http://tonyhluo.top/categories/Code/"/>
    
    
      <category term="Code" scheme="http://tonyhluo.top/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer之从尾到头打印链表</title>
    <link href="http://tonyhluo.top/2019/01/27/codePrintList/"/>
    <id>http://tonyhluo.top/2019/01/27/codePrintList/</id>
    <published>2019-01-27T14:50:48.000Z</published>
    <updated>2019-01-27T15:15:46.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>&emsp;&emsp;输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  struct ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        struct ListNode *next;</span></span><br><span class="line"><span class="comment">*        ListNode(int x) :</span></span><br><span class="line"><span class="comment">*              val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*  &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printListFromTailToHead(ListNode* head) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == head)</span><br><span class="line">            <span class="keyword">return</span> vec;</span><br><span class="line">        ListNode* node = head;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">NULL</span> != node)</span><br><span class="line">        &#123;</span><br><span class="line">            vec.push_back(node-&gt;val);</span><br><span class="line">            node = node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrayRever;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator riter;</span><br><span class="line">        <span class="keyword">for</span> (riter = vec.rbegin(); riter != vec.rend(); riter++)</span><br><span class="line">        &#123;</span><br><span class="line">            arrayRever.push_back(*riter);</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> arrayRever;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。&lt;br&gt;
    
    </summary>
    
      <category term="Code" scheme="http://tonyhluo.top/categories/Code/"/>
    
    
      <category term="Code" scheme="http://tonyhluo.top/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer之替换空格</title>
    <link href="http://tonyhluo.top/2019/01/27/codeSpace/"/>
    <id>http://tonyhluo.top/2019/01/27/codeSpace/</id>
    <published>2019-01-27T14:39:32.000Z</published>
    <updated>2019-01-27T14:45:36.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>&emsp;&emsp;请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。<br><a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replaceSpace</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == str || length &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> blankNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(str); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="number">32</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++blankNum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> newLen = <span class="built_in">strlen</span>(str) + <span class="number">2</span> * blankNum;</span><br><span class="line">        <span class="keyword">int</span> originalIdex = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">int</span> newIdex = newLen;</span><br><span class="line">        <span class="keyword">while</span>(originalIdex &gt;= <span class="number">0</span> &amp;&amp; newIdex &gt; originalIdex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[originalIdex] == <span class="number">32</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                str[newIdex--] = <span class="number">48</span>;</span><br><span class="line">                str[newIdex--] = <span class="number">50</span>;</span><br><span class="line">                str[newIdex--] = <span class="number">37</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                str[newIdex--] = str[originalIdex];</span><br><span class="line">            &#125;</span><br><span class="line">            --originalIdex;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。&lt;br&gt;
    
    </summary>
    
      <category term="Code" scheme="http://tonyhluo.top/categories/Code/"/>
    
    
      <category term="Code" scheme="http://tonyhluo.top/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>python之字符串</title>
    <link href="http://tonyhluo.top/2019/01/26/pythonString/"/>
    <id>http://tonyhluo.top/2019/01/26/pythonString/</id>
    <published>2019-01-26T12:07:39.000Z</published>
    <updated>2019-02-01T14:12:09.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote></blockquote><p><em>字符串类型是python里面最长见的数据类型。记住一点python里面的单引号和双引号的作用是相同的，这是python不同于其他语言的一点。比如说在C语言里面用单引号来标识字符，用双引号来标识字符串，但是在python里面没有字符这个概念，这有可能是单引号和双引号的作用是相同的另外一个原因吧。字符串是<strong>不可变</strong>的类型，意味着改变一个字符串的元素需要新建一个新的字符串。字符串中的字符可以通过切片操作顺序的访问。</em></p><a id="more"></a><hr><h1 id="1-字符串的创建和赋值"><a href="#1-字符串的创建和赋值" class="headerlink" title="1.字符串的创建和赋值"></a>1.字符串的创建和赋值</h1><p>&emsp;&emsp;创建字符串就和创建其他变量一样简单，当然你也可以用把 <strong><em>str()</em></strong> 作为工厂方法创建一个字符串并把它赋值给一个变量，直接上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aString = <span class="string">"You are my friend"</span></span><br><span class="line">bString = str(<span class="string">"You are my friend too"</span>)</span><br></pre></td></tr></table></figure></p><h1 id="2-值的访问"><a href="#2-值的访问" class="headerlink" title="2.值的访问"></a>2.值的访问</h1><p>&emsp;&emsp;前言中已经提到，python没有<strong><em>字符</em></strong> 的概念，所以替换它的是长度为1的字符串，可以用[i]、[i:]、[:i]、[i:j] 的方式来访问字符串中的某个值或者说某一个子串，i 和  j 分别代表索引，python中字符串索引和其他语言也是一样的，下标从0开始。如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aString = <span class="string">"You are my friend"</span></span><br><span class="line">aString[<span class="number">0</span>]   <span class="comment">#对应于"Y"</span></span><br><span class="line">aString[<span class="number">1</span>:]  <span class="comment">#对应于"ou are my friend"</span></span><br><span class="line">aString[:<span class="number">5</span>]  <span class="comment">#对应于"You a"</span></span><br><span class="line">aString[<span class="number">2</span>:<span class="number">6</span>] <span class="comment">#对应于"u ar"</span></span><br></pre></td></tr></table></figure></p><h1 id="3-改变字符串"><a href="#3-改变字符串" class="headerlink" title="3.改变字符串"></a>3.改变字符串</h1><p>&emsp;&emsp;可以通过给一个字符串赋值的方式来<strong><em>更新</em></strong> 一个已有的字符串。上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aString = <span class="string">"You are my friend"</span></span><br><span class="line">aString = aString[:<span class="number">11</span>] + <span class="string">"classmates"</span> <span class="comment">#对应于"You are my classmates"</span></span><br><span class="line">aString = <span class="string">"Yes,you too!"</span>              <span class="comment">#对应于"Yes,you too!"</span></span><br></pre></td></tr></table></figure></p><h1 id="4-删除字符串"><a href="#4-删除字符串" class="headerlink" title="4.删除字符串"></a>4.删除字符串</h1><p>&emsp;&emsp;首先，字符串是<strong><em>不可变</em></strong> 的，所以你不能删除一个字符串里的某个字符，能做的只是清空一个空字符串，或者把把不需要的字符串剔除再拼接，上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aString = <span class="string">"You are my friend"</span></span><br><span class="line">aString = aString[:<span class="number">5</span>] + aString[<span class="number">6</span>:] <span class="comment">#删除"r"</span></span><br><span class="line">print(aString)                      <span class="comment">#输出 "You ae my friend"</span></span><br></pre></td></tr></table></figure></p><h1 id="5-字符串操作符"><a href="#5-字符串操作符" class="headerlink" title="5.字符串操作符"></a>5.字符串操作符</h1><h2 id="5-1-标准操作符"><a href="#5-1-标准操作符" class="headerlink" title="5.1 标准操作符"></a>5.1 标准操作符</h2><p>&emsp;&emsp;字符串操作符有标准类型的操作符，比如：&lt;、&gt;、==、!=，这些和其他语言的比较操作符一样，是按照ASCII值的大小来比较，在这里就不细究了。</p><h2 id="5-2-序列操作符"><a href="#5-2-序列操作符" class="headerlink" title="5.2 序列操作符"></a>5.2 序列操作符</h2><p>&emsp;&emsp;字符串也有序列操作符切片，关于切片我会专门做一个专题来讲。</p><h2 id="5-3-成员操作符"><a href="#5-3-成员操作符" class="headerlink" title="5.3 成员操作符"></a>5.3 成员操作符</h2><p>&emsp;&emsp;字符串也有自己的成员操作符<strong><em>in</em></strong>和<strong><em>not in</em></strong>。上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aString = <span class="string">"py"</span></span><br><span class="line">bString = <span class="string">"pt"</span></span><br><span class="line">cString = <span class="string">"python"</span></span><br><span class="line">print(aString <span class="keyword">in</span> cString) <span class="comment">#Ture</span></span><br><span class="line">print(bString <span class="keyword">in</span> cString) <span class="comment">#False</span></span><br></pre></td></tr></table></figure></p><h2 id="5-4-连接符（-）"><a href="#5-4-连接符（-）" class="headerlink" title="5.4 连接符（+）"></a>5.4 连接符（+）</h2><p>&emsp;&emsp;和C++ STL中的string一样，python也有连接操作符<strong>“+”</strong> ，我们可以通过这种连接操作符来从原有的字符串获得一个新的字符串。上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aString = <span class="string">"I am a"</span> + <span class="string">"coder"</span></span><br><span class="line">print(aString) <span class="comment">#输出"I am acoder"</span></span><br><span class="line">aString = <span class="string">"I am a"</span> + <span class="string">" "</span> + <span class="string">"coder"</span></span><br><span class="line">print(aString) <span class="comment">#输出"I am a coder"</span></span><br></pre></td></tr></table></figure></p><h1 id="6-独特特性"><a href="#6-独特特性" class="headerlink" title="6.独特特性"></a>6.独特特性</h1><h2 id="6-1-三引号"><a href="#6-1-三引号" class="headerlink" title="6.1 三引号"></a>6.1 三引号</h2><p>&emsp;&emsp;三引号允许字符串夸多行显示，字符串中可以包含换行符，制表符等其他特殊字符。上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">aString = <span class="string">'''I</span></span><br><span class="line"><span class="string">am</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">coder'''</span></span><br><span class="line">print(aString)</span><br><span class="line"><span class="comment">#输出如下：</span></span><br><span class="line"><span class="comment">##################</span></span><br><span class="line"><span class="comment">#I</span></span><br><span class="line"><span class="comment">#am</span></span><br><span class="line"><span class="comment">#a</span></span><br><span class="line"><span class="comment">#coder</span></span><br><span class="line"><span class="comment">#################</span></span><br></pre></td></tr></table></figure></p><h2 id="6-2-不变性"><a href="#6-2-不变性" class="headerlink" title="6.2 不变性"></a>6.2 不变性</h2><p>&emsp;&emsp;前言中提过，字符串是一种不可变的数据类型，也就是说它的值不能被改变或者被修改。所以如果想改变一个字符串，你就要新创建一个字符串。可是，在实际应用中没有想象中的那么复杂，原因是python为你管理内存，你根本不需要关心到底发生了什么，你每次变更一个字符串时，python都会为你分配一个新的字符串。<br>&emsp;&emsp;我们可以用 <strong><em>id()</em></strong> 函数来验证一下上面所说的，什么叫<strong><em>id()</em></strong> 函数？你可以把它理解为<strong><em>内存地址</em></strong> 。上代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aString = <span class="string">"You are my friend"</span></span><br><span class="line">id1 = id(aString)</span><br><span class="line">print(id1) <span class="comment">#输出36610384</span></span><br><span class="line">aString += <span class="string">"too"</span></span><br><span class="line">id2 = id(aString)</span><br><span class="line">print(id2) <span class="comment">#输出36698848</span></span><br></pre></td></tr></table></figure></p><p>有没有看到？修改前后身份变啦~~</p><h1 id="7-一个注意点"><a href="#7-一个注意点" class="headerlink" title="7.一个注意点"></a>7.一个注意点</h1><p>&emsp;&emsp;python字符串中不是通过NUL或者’\0’来结束的！！！在C风格编程语言中，一个主要的原因是你访问了一个字符串后面本不属于你的空间，发生这种情况原因是你没有在字符串末尾添加NUL或’\0’。在python中就没有这种情况了，python字符串不是以NUL来结束的，所以你不要担心有没有添加终止符。字符串中只包含你所定义的内容，其余都没有。</p><hr><p>&emsp;&emsp;上面的内容就是一些python字符串的基本应用，很简单吧，可是字符串在其他语言中，比如在C语言中可没这么简单，一些有关字符串的操作运用了C标准库函数，比如memcpy()，strncpy()等等，这些都必须要对内存中字符串的形态要有所了解，而python的字符串你只管用就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;字符串类型是python里面最长见的数据类型。记住一点python里面的单引号和双引号的作用是相同的，这是python不同于其他语言的一点。比如说在C语言里面用单引号来标识字符，用双引号来标识字符串，但是在python里面没有字符这个概念，这有可能是单引号和双引号的作用是相同的另外一个原因吧。字符串是&lt;strong&gt;不可变&lt;/strong&gt;的类型，意味着改变一个字符串的元素需要新建一个新的字符串。字符串中的字符可以通过切片操作顺序的访问。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://tonyhluo.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://tonyhluo.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>关于博客</title>
    <link href="http://tonyhluo.top/2019/01/24/firstblog/"/>
    <id>http://tonyhluo.top/2019/01/24/firstblog/</id>
    <published>2019-01-23T16:20:21.000Z</published>
    <updated>2019-01-26T16:27:50.087Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/01/26/5c4c48b738882.jpg" alt="blog.jpg"><br><a id="more"></a><br>&emsp;&emsp;折腾了两天，属于自己的Blog终于有个雏形了，在整个过程学到了一些前端技术，还是有所收获的。</p><p>&emsp;&emsp;此站点是我平时记录一些技术文章的地方，为什么要写博客？主要有以下几点：</p><p>1.平时看的东西比较杂，特别是技术上的一些书和文章，希望能在blog上收敛，起到一个归总的作用；</p><p>2.说实话，记性不太好，希望能通过写blog起到一个巩固的作用，俗话说好记性不如烂笔头；</p><p>3.我相信通过写blog可以把书看薄吧。</p><p>&emsp;&emsp;希望这是一个好的开始，让我们在技术的世界里遨游吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/01/26/5c4c48b738882.jpg&quot; alt=&quot;blog.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://tonyhluo.top/categories/Essay/"/>
    
    
      <category term="Essay" scheme="http://tonyhluo.top/tags/Essay/"/>
    
  </entry>
  
</feed>
